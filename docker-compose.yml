#
# docker-compose.yml
#
services:
  #
  # database by PostgreSQL
  #
  db:
    container_name: db
    hostname: ${DATABASE_HOST}
    image: postgres:17.4
    restart: always
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./db/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - ${DATABASE_PORT}:5432
    networks:
      - be
    environment:
      TZ: Asia/Tokyo
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_DBNAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  #
  # backend API server.
  #
  backend:
    container_name: backend
    hostname: backend
    build:
      context: ../todolist_backend
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    networks:
      - be
    volumes:
      - ./logs:/app/logs
    environment:
      # Database (MySQL)
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_DBNAME: ${DATABASE_DBNAME}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ['CMD-SHELL', 'curl http://backend:3000/api || exit 1']
      start_period: 3s
      retries: 3
      timeout: 1s
      interval: 1s

networks:
  be: {}
